const os = require("os");
const Path = require("path");
const { SyncFile } = require("ada-util");

const config = {
  basePath: "",
  key: "",
  project: "global-primebox",
  sourcePath: "",
  outputPath: "",
  longKeyPath: "",
  buildSourcePath: "./src",
  buildOutputPath: "./dist",
  gkeysPathIgnore: ["node_modules", ".git"],
  filePrefix: "keys",
  keyReg: /{#(.*?)#}/g,
  langKeyPattern: /^P_[a-zA-Z0-9-_]+/,
  gitBranchPattern: /^BRANCH_T[0-9]+(?:_\d+)?$/,
  defaultLang: { lang: "en-us", exclude: ["zh-cn", "zh-hk", "ja-jp", "zh-tw"] },
  gkeysSuffix: [".ejs", ".html", ".vue"],
  dingdingRobot: true,
  dingdingRobotPath:
    "https://oapi.dingtalk.com/robot/send?access_token=ff75913bf7d3682664ca4703b9010c699a2cdfea1dc016b64c623547edcfb487",
  dingdingRobotScret: "",
  departKeys: ["", "ENV", "unsafety_link", "tiny_amount_link", "---"],
  migrateTargetFileName: "master.json",
  authToken:
    "8e0e7e8c4de31297257d78f60c597dbc8bf183f2113f8108c82bdce89e6b3e45f93bcc993a94071d",
  languageMap: {
    "en-us": {
      crowdin: "en-US",
      LANG: "en-us",
      LANG_CODE: "en",
      LANG_AREA: "us",
      ROOT: "/",
      ZENDESK_LANG: "en-us",
    },
    "zh-cn": {
      crowdin: "zh-CN",
      LANG: "zh-cn",
      LANG_CODE: "zh",
      LANG_AREA: "cn",
      ROOT: "/zh-cn/",
      ZENDESK_LANG: "zh-cn",
    },
    "zh-tw": {
      crowdin: "zh-TW",
      LANG: "zh-tw",
      LANG_CODE: "zh",
      LANG_AREA: "tw",
      ROOT: "/zh-tw/",
      ZENDESK_LANG: "zh-tw",
    },
    "ru-ru": {
      crowdin: "ru",
      LANG: "ru-ru",
      LANG_CODE: "ru",
      LANG_AREA: "ru",
      ROOT: "/ru-ru/",
      ZENDESK_LANG: "ru",
    },
    "fr-fr": {
      crowdin: "fr",
      LANG: "fr-fr",
      LANG_CODE: "fr",
      LANG_AREA: "fr",
      ROOT: "/fr-fr/",
      ZENDESK_LANG: "fr",
    },
    "id-id": {
      crowdin: "id",
      LANG: "id-id",
      LANG_CODE: "id",
      LANG_AREA: "id",
      ROOT: "/id-id/",
      ZENDESK_LANG: "id",
    },
    "ko-kr": {
      crowdin: "ko",
      LANG: "ko-kr",
      LANG_CODE: "ko",
      LANG_AREA: "kr",
      ROOT: "/ko-kr/",
      ZENDESK_LANG: "ko",
    },
    "pt-pt": {
      crowdin: "pt-PT",
      LANG: "pt-pt",
      LANG_CODE: "pt",
      LANG_AREA: "pt",
      ROOT: "/pt-pt/",
      ZENDESK_LANG: "pt",
    },
    "es-es": {
      crowdin: "es-ES",
      LANG: "es-es",
      LANG_CODE: "es",
      LANG_AREA: "es",
      ROOT: "/es-es/",
      ZENDESK_LANG: "es",
    },
    "vi-vi": {
      crowdin: "vi",
      LANG: "vi-vi",
      LANG_CODE: "vi",
      LANG_AREA: "vi",
      ROOT: "/vi-vi/",
      ZENDESK_LANG: "vi",
    },
    "th-th": {
      crowdin: "th",
      LANG: "th-th",
      LANG_CODE: "th",
      LANG_AREA: "th",
      ROOT: "/th-th/",
      ZENDESK_LANG: "th",
    },
    "sv-se": {
      crowdin: "sv-SE",
      LANG: "sv-se",
      LANG_CODE: "sv",
      LANG_AREA: "se",
      ROOT: "/sv-se/",
      ZENDESK_LANG: "sv-se",
    },
    "ar-ae": {
      crowdin: "ar",
      LANG: "ar-ae",
      LANG_CODE: "ar",
      LANG_AREA: "ae",
      ROOT: "/ar-ae/",
      ZENDESK_LANG: "ar-ae",
    },
  },
  languageMapVars: {
    zendeskRoot: "https://support.huobipro.com/hc/",
  },
  languageMapGenerater(vars) {
    return {};
  },
  watch(hooker) {
    // hooker.hook('dingding-message', ({ info }) => {
    // 	info.message = {
    // 		"msgtype": "text",
    // 		"text": {
    // 			"content": "我就是我, 是不一样的烟火@156xxxx8827"
    // 		}
    // 	};
    // });
    // hooker.hook('pull-end', ({ remote, util }) => {
    // 	return remote.getTranslateStatus('en-us').then(a => {
    // 		util.formatStatus(a.files);
    // 	});
    // });
    // hooker.hook('push-end', ({ remote, local, error, name }) => {
    // 	if (!error) {
    // 		return local.getPushedKeys().then(keys => {
    // 			let r = {};
    // 			keys.forEach(key => {
    // 				r[key] = key.substring(0, 5);
    // 			});
    // 			return remote.uploadTranslation({ fileName: name, data: r, language: 'zh-tw' });
    // 		});
    // 	}
    // });
  },
  commands: [
    {
      name: "",
      alias: "",
      options: [{ param: "-l,--log [log]", desc: "show log detail" }],
      description: "sync and download translates",
      action(crowdin, option) {
        console.log(crowdin);
      },
    },
  ],
};

config._dev = process.env.DEV === "true";

if (!config.basePath) {
  config.basePath = process.cwd();
}
if (config._dev) {
  Object.assign(config, {
    basePath: "/Users/jinliang/thin/fed-hbg-en",
    _devBranch: "BRANCH_T135122",
  });
}

const configFilePath = Path.resolve(config.basePath, `./crowdin.hb.js`);
new SyncFile(configFilePath).exist &&
  Object.assign(config, require(configFilePath) || {});
config.sourcePath = Path.resolve(config.basePath, config.sourcePath);
if (config.outputPath) {
  config.outputPath = Path.resolve(config.basePath, config.outputPath);
}
if (config.longKeyPath) {
  config.longKeyPath = Path.resolve(config.basePath, config.longKeyPath);
}
config.buildOutputPath = Path.resolve(config.basePath, config.buildOutputPath);
config.buildSourcePath = Path.resolve(config.basePath, config.buildSourcePath);

let langCodeMap = {};
Reflect.ownKeys(config.languageMap).forEach((key) => {
  langCodeMap[config.languageMap[key].crowdin] = key;
});
config.langCodeMap = langCodeMap;
config._showLog = false;
config.log = (...args) => {
  if (config._showLog) {
    console.log(...args);
  }
};
config._cachePath = Path.resolve(os.homedir(), "./.fed-crowdin");
config._cache_keys_path = Path.resolve(
  config._cachePath,
  `./${config.project}/keys`
);
config._cache_pro_path = Path.resolve(
  config._cachePath,
  `./${config.project}/project.json`
);
config._cache_project_path = Path.resolve(
  config._cachePath,
  `./${config.project}/state.json`
);
config._cache_migrate_path = Path.resolve(
  config._cachePath,
  `./${config.project}/migrate`
);
config._cache_translate_path = Path.resolve(
  config._cachePath,
  `./${config.project}/translate.zip`
);
config._cache_translate_unzip_path = Path.resolve(
  config._cachePath,
  `./${config.project}/translates`
);

module.exports = config;
