const config = require("./config/index");
const chalk = require("chalk");
const cliProgress = require("cli-progress");
const ora = require("ora");

const Hooker = {
  _hooker: {},
  _remote: null,
  _local: null,
  _util: null,
  hook(type, fn) {
    if (!this._hooker[type]) {
      this._hooker[type] = [];
    }
    if (!this._hooker[type].includes(fn)) {
      this._hooker[type].push(fn);
    }
    return this;
  },
  emit(type, data = {}) {
    let context = {
      ...(data || {}),
      config,
      util: this._util,
      remote: this._remote,
      local: this._local,
      result: undefined,
    };
    return (this._hooker[type] || [])
      .reduce((a, fn) => {
        return a.then(() => {
          return new Promise((resolve) => {
            return Promise.resolve()
              .then(() => {
                return fn(context);
              })
              .then(resolve, (e) => {
                console.log(e);
                resolve();
              });
          });
        });
      }, Promise.resolve())
      .then(() => {
        return { data, result: context.result };
      });
  },
  has(type) {
    return this._hooker[type] && this._hooker[key].length > 0;
  },
};

const Progress = {
  _bar: null,
  format(value, radmon = 2) {
    let v = 0,
      unit = "BYTE",
      byteSize = value;
    radmon = radmon || 0;
    if (byteSize >= 1073741824) {
      v = (byteSize / 1073741824).toFixed(radmon);
      unit = "GB";
    } else if (byteSize >= 1048576) {
      v = (byteSize / 1048576).toFixed(radmon);
      unit = "MB";
    } else if (byteSize >= 1024) {
      v = (byteSize / 1024).toFixed(radmon);
      unit = "KB";
    } else {
      v = byteSize;
      unit = "B";
    }
    return v + unit;
  },
  update(value, current, total) {
    if (!this._bar) {
      this._bar = new cliProgress.SingleBar(
        {
          format: "Download Translate [{bar}] {percentage}% | {cur}/{all}",
        },
        cliProgress.Presets.legacy
      );
      this._bar.start(100, 0, { all: 0, cur: 0 });
    } else {
      total = this.format(total);
      current = this.format(current);
      this._bar.update(parseInt(value * 100), { all: total, cur: current });
    }
  },
  stop() {
    if (this._bar) {
      this._bar.stop();
      this._bar = null;
    }
  },
};

const TranslateProgress = Object.assign({}, Progress, {
  format(value) {
    return `${value}`;
  },
  update(value, current, total) {
    if (!this._bar) {
      this._bar = new cliProgress.SingleBar(
        {
          format: "Translate Source [{bar}] {percentage}% | {cur}/{all}",
        },
        cliProgress.Presets.legacy
      );
      this._bar.start(100, 0, { all: 0, cur: 0 });
    } else {
      total = this.format(total);
      current = this.format(current);
      this._bar.update(parseInt(value * 100), { all: total, cur: current });
    }
  },
});

const SyncProgress = Object.assign({}, Progress, {
  format(value) {
    return `${value}`;
  },
  update(value, current, total) {
    if (!this._bar) {
      this._bar = new cliProgress.SingleBar(
        {
          format: "Sync Remote Status [{bar}] {percentage}% | {cur}/{all}",
        },
        cliProgress.Presets.legacy
      );
      this._bar.start(100, 0, { all: 0, cur: 0 });
    } else {
      total = this.format(total);
      current = this.format(current);
      this._bar.update(parseInt(value * 100), { all: total, cur: current });
    }
  },
});

const Spinner = {
  map: {},
  update(id, desc) {
    if (!this.map[id]) {
      this.map[id] = ora(desc).start();
    } else {
      if (desc) {
        this.map[id].text = desc;
      }
    }
  },
  stop(id) {
    if (this.map[id]) {
      this.map[id].stop();
    }
    delete this.map[id];
  },
  success(id, desc) {
    if (this.map[id]) {
      this.map[id].succeed(desc);
    }
    delete this.map[id];
  },
  fail(id, desc) {
    if (this.map[id]) {
      this.map[id].fail(desc);
    }
    delete this.map[id];
  },
};

Hooker.hook("sync-start", () => {
  config.log("- start sync to remote");
  Spinner.update("sync", "sync to remote");
})
  .hook("sync-diff", ({ info: { add, remove, edit } }) => {
    Spinner.stop("sync");
    config.log(
      `- Add:[${add.length}],Remove:[${remove.length}],Edit:[${edit.length}]`
    );
  })
  .hook("sync-remove-start", ({ file }) => {
    config.log(`- start remove file ${file.name}`);
  })
  .hook("sync-remove-end", ({ file, error }) => {
    config.log(`- remove file done ${file.name}`);
    error && console.log(error);
  })
  .hook("sync-add-start", ({ file }) => {
    config.log(`- start add file ${file.name}`);
  })
  .hook("sync-add-end", ({ file, error }) => {
    config.log(`- add file done ${file.name}`);
    error && console.log(error);
  })
  .hook("sync-edit-start", ({ file }) => {
    config.log(`- start edit file ${file.name}`);
  })
  .hook("sync-edit-end", ({ file, error }) => {
    config.log(`- edit file done ${file.name}`);
    error && console.log(error);
  })
  .hook("sync-progress", ({ total, done }) => {
    if (total != 0) {
      SyncProgress.update(done / total, done, total);
    }
  })
  .hook("sync-end", ({ error }) => {
    SyncProgress.stop();
    config.log("- sync to remote end");
    error && console.log(error);
  });

Hooker.hook("pull-start", () => {
  config.log(`- start pull`);
})
  .hook("translate-get-start", () => {
    config.log(`- start get translates`);
    Spinner.update("download", "Download");
  })
  .hook("built-progress", ({ progress }) => {
    Progress.update(progress / 100, progress, 100);
  })
  .hook("built-end", ({}) => {
    Progress.stop();
  })
  .hook("download-start", () => {
    Spinner.stop("download");
  })
  .hook("download-progress", ({ transferred, percent, total }) => {
    Progress.update(percent, transferred, total);
  })
  .hook("download-end", ({ error }) => {
    Progress.stop();
    config.log(`- download translates end`);
    error && console.log(error);
  })
  .hook("download-ignore", () => {
    Spinner.stop("download");
    config.log(`- no need to download`);
  })
  .hook("translate-get-end", ({ error }) => {
    config.log(`- get translates end`);
    error && console.log(error);
  })
  .hook("output-start", () => {
    config.log(`- start output`);
    Spinner.update("output", "Output");
  })
  .hook("output-variable", ({ variable }) => {})
  .hook("output-translate", ({ fileName, lang, translate }) => {})
  .hook("output-error-end", ({ error }) => {
    Spinner.stop("output");
    config.log(`- output end`);
    error && console.log(error);
  })
  .hook("output-end", ({ error }) => {
    Spinner.stop("output");
    config.log(`- output end`);
    error && console.log(error);
  })
  .hook("pull-end", ({ error }) => {
    config.log(`- pull end`);
    error && console.log(error);
  });

Hooker.hook("gkeys-start", () => {
  config.log("- start to gkeys");
})
  .hook("gkeys-keys-result", ({ keys }) => {
    let _keys = Reflect.ownKeys(keys);
    if (_keys.length > 0) {
      config.log(chalk(`- there are ${_keys.length} keys`).green);
      config.log("  -----------------------");
      _keys.forEach((key) => {
        config.log(" ", chalk(key).green, chalk(keys[key]).grey);
      });
    } else {
      console.log("- no new keys");
    }
  })
  .hook("gkeys-end", ({ error }) => {
    config.log("- gkeys end");
    error && console.log(error);
  });

Hooker.hook("push-start", () => {
  config.log("- start push");
})
  .hook("push-keys", ({ add, remove }) => {})
  .hook("push-end", ({ add, remove, error }) => {
    console.log(
      `Pushed Add:[ ${chalk(add.length).yellow} ],Remove:[ ${
        chalk(remove.length).yellow
      } ]`
    );
    config.log(`- push end add:[${add.length}],remote:[${remove.length}]`);
    add.forEach((a) => {
      config.log(`- Add Key:`, a);
    });
    remove.forEach((a) => {
      config.log(`- Remove Key:`, a);
    });
    error && console.log(error);
  });

Hooker.hook("build-start", () => {
  Spinner.update("build", "check and export translates");
}).hook("build-end", ({ error }) => {
  Spinner.stop("build");
  error && console.log(error);
});

Hooker.hook("uploadkey-start", ({ fileName }) => {
  config.log(`- start upload key file ${fileName}`);
  Spinner.update(fileName, `Upload key file ${fileName}`);
}).hook("uploadkey-end", ({ fileName, error }) => {
  Spinner.stop(fileName);
  config.log(`- upload key file ${fileName} end`);
  error && console.log(error);
});

Hooker.hook("uploadtranslate-start", ({ fileName, language }) => {
  config.log(`- start upload translate ${fileName}[${language}]`);
  Spinner.update(fileName, `Upload translate file ${fileName}[${language}]`);
}).hook("uploadtranslate-end", ({ fileName, language, error }) => {
  Spinner.stop(fileName);
  config.log(`- upload translate ${fileName}[${language}] end`);
  error && console.log(error);
});

Hooker.hook("getkey-start", ({ fileId, fileName }) => {
  config.log(`- start download raw key file [ ${fileName} ]`);
  // Spinner.update(fileId, `Download raw key file [ ${fileName} ]`);
}).hook("getkey-end", ({ fileId, error }) => {
  // Spinner.stop(fileId);
  config.log(`- download raw key file ${fileId} done`);
  error && console.log(error);
});

Hooker.hook("dingding-start", () => {
  config.log("- start send message to dingding group");
  Spinner.update("dingding", "Send to dingding");
})
  .hook(
    "dingding-message",
    ({
      info: {
        branchName,
        taskName,
        project,
        userName,
        removeInfo,
        addInfo,
        comment,
        dingdingURL,
        message,
        tokit,
        config,
      },
    }) => {}
  )
  .hook("dingding-end", ({ error }) => {
    Spinner.stop("dingding");
    config.log("- send message to dingding group done");
    error && console.log(error);
  });
Hooker.hook("status-start", () => {
  Spinner.update("get-status", "get status info");
})
  .hook("status-end", () => {
    Spinner.stop("get-status");
  })
  .hook("status-error", (e) => {
    e && console.log(e);
  });
Hooker.hook("translate-source-start", () => {})
  .hook("translate-source-progress", ({ progress, total, current }) => {
    TranslateProgress.update(progress / 100, current, total);
  })
  .hook("translate-source-end", ({ error }) => {
    TranslateProgress.stop();
    if (error) {
      console.log(e);
    }
  });
Hooker.hook("diff-start", () => {
  Spinner.update("diff", "diff status");
}).hook("diff-end", () => {
  Spinner.stop("diff");
});
Hooker.hook("find-start", () => {
  Spinner.update("findkey", "search key");
}).hook("find-end", () => {
  Spinner.stop("findkey");
});

config.watch && config.watch(Hooker);

module.exports = Hooker;
