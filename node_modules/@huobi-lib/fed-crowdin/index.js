const HBCrowdin = require("./src/index");
const AsyncCache = require("./src/util/cache");

const crowdin = new HBCrowdin();
const util = {
  crowdin,
  apis: crowdin.crowdin._v2.apis,
  sync() {
    return this.crowdin.pull();
  },
  getTranslates(lang) {
    if (lang) {
      if (!Array.isArray(lang)) {
        lang = [lang];
      }
    } else {
      lang = this.crowdin.util.getLocalLangCodes();
    }
    let r = {};
    return lang
      .reduce((a, lang) => {
        return a.then(() => {
          return this.crowdin.local.outputer.getTranslate(lang).then((info) => {
            r[lang] = info;
          });
        });
      }, Promise.resolve())
      .then(() => r);
  },
  getTranslate(lang, key) {
    if (!this._cache) {
      this._cache = new AsyncCache(() => {
        return this.getTranslates();
      });
    }
    return this._cache.get().then(({ result }) => {
      return result[lang][key];
    });
  },
  getKeys(key) {
    if (key) {
      return this.crowdin.local.keys.getKeys({
        fileName: `${crowdin.config.filePrefix}_${key}.json`,
      });
    } else {
      return this.crowdin.local.keys.getKeys();
    }
  },
  getStatus(langCode) {
    if (langCode) {
      return this.crowdin.crowdin.getLanguageStatus(langCode);
    } else {
      return this.crowdin.crowdin.getTranslateStatus();
    }
  },
  translate() {
    return this.crowdin.translate();
  },
};

module.exports = util;
