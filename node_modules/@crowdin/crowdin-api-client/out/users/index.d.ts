import { CrowdinApi, Pagination, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';
/**
 * Users API gives you the possibility to get profile information about the currently authenticated user.
 *
 * In Crowdin Enterprise users are the members of your organization with the defined access levels.
 * Use API to get the list of organization users and to check the information on a specific user.
 */
export declare class Users extends CrowdinApi {
    /**
     * @param projectId project identifier
     * @param options optional parameters for the request
     * @see https://support.crowdin.com/api/v2/#operation/api.projects.members.getMany
     */
    listProjectMembers(projectId: number, options?: UsersModel.ListProjectMembersOptions): Promise<ResponseList<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;
    /**
     * @param projectId project identifier
     * @param search search users by firstName, lastName or username
     * @param role defines role type
     * @param languageId language identifier
     * @param limit maximum number of items to retrieve (default 25)
     * @param offset starting offset in the collection (default 0)
     * @deprecated optional parameters should be passed through an object
     * @see https://support.crowdin.com/api/v2/#operation/api.projects.members.getMany
     */
    listProjectMembers(projectId: number, search?: string, role?: UsersModel.Role, languageId?: string, limit?: number, offset?: number): Promise<ResponseList<UsersModel.ProjectMember | UsersModel.EnterpriseProjectMember>>;
    /**
     * @param projectId project identifier
     * @param request request body
     * @see https://support.crowdin.com/enterprise/api/#operation/api.projects.members.post
     */
    addProjectMember(projectId: number, request: UsersModel.AddProjectMemberRequest): Promise<UsersModel.AddProjectMemberResponse>;
    /**
     * @param projectId project identifier
     * @param memberId member identifier
     * @see https://support.crowdin.com/api/v2/#operation/api.projects.members.get
     */
    getProjectMemberPermissions(projectId: number, memberId: number): Promise<ResponseObject<UsersModel.ProjectMember>>;
    /**
     * @param projectId project identifier
     * @param memberId member identifier
     * @see https://support.crowdin.com/enterprise/api/#operation/api.projects.members.put
     */
    replaceProjectMemberPermissions(projectId: number, memberId: number, request?: UsersModel.ReplaceProjectMemberRequest): Promise<ResponseObject<UsersModel.ProjectMember>>;
    /**
     * @param projectId project identifier
     * @param memberId member identifier
     * @see https://support.crowdin.com/enterprise/api/#operation/api.projects.members.delete
     */
    deleteMemberFromProject(projectId: number, memberId: number): Promise<void>;
    /**
     * @param options optional parameters for the request
     * @see https://support.crowdin.com/enterprise/api/#operation/api.users.getMany
     */
    listUsers(options?: UsersModel.ListUsersOptions): Promise<ResponseList<UsersModel.User>>;
    /**
     * @param status filter users by status
     * @param search search users by firstName, lastName, username, email
     * @param twoFactor filter users by two-factor authentication status
     * @param limit maximum number of items to retrieve (default 25)
     * @param offset starting offset in the collection (default 0)
     * @deprecated optional parameters should be passed through an object
     * @see https://support.crowdin.com/enterprise/api/#operation/api.users.getMany
     */
    listUsers(status?: UsersModel.Status, search?: string, twoFactor?: UsersModel.TwoFactor, limit?: number, offset?: number): Promise<ResponseList<UsersModel.User>>;
    /**
     * @param request request body
     * @see https://support.crowdin.com/enterprise/api/#operation/api.users.post
     */
    inviteUser(request: UsersModel.InviteUserRequest): Promise<ResponseObject<UsersModel.User>>;
    /**
     * @param userId user identifier
     * @see https://support.crowdin.com/enterprise/api/#operation/api.users.getById
     */
    getUserInfo(userId: number): Promise<ResponseObject<UsersModel.User>>;
    /**
     * @param userId user identifier
     * @see https://support.crowdin.com/enterprise/api/#operation/api.users.delete
     */
    deleteUser(userId: number): Promise<void>;
    /**
     * @param userId user identifier
     * @param request request body
     * @see https://support.crowdin.com/enterprise/api/#operation/api.users.patch
     */
    editUser(userId: number, request: PatchRequest[]): Promise<ResponseObject<UsersModel.User>>;
    /**
     * @see https://support.crowdin.com/api/v2/#operation/api.user.get
     */
    getAuthenticatedUser(): Promise<ResponseObject<UsersModel.User>>;
}
export declare namespace UsersModel {
    interface ListProjectMembersOptions extends PaginationOptions {
        search?: string;
        role?: Role;
        languageId?: string;
    }
    interface ListUsersOptions extends PaginationOptions {
        status?: Status;
        search?: string;
        twoFactor?: TwoFactor;
    }
    interface InviteUserRequest {
        email: string;
        firstName?: string;
        lastName?: string;
        timezone?: string;
    }
    interface User {
        id: number;
        username: string;
        email: string;
        firstName: string;
        lastName: string;
        status: Status;
        avatarUrl: string;
        createdAt: string;
        lastSeen: string;
        twoFactor: string;
        isAdmin: boolean;
        timezone: string;
    }
    type Status = 'active' | 'pending' | 'blocked';
    type TwoFactor = 'enabled' | 'disabled';
    interface ProjectMember {
        id: number;
        username: string;
        fullName: string;
        role: Role;
        permissions: {
            [lang: string]: LanguageRole | string;
        };
        avatarUrl: string;
        joinedAt: string;
        timezone: string;
    }
    interface EnterpriseProjectMember {
        id: number;
        username: string;
        firstName: string;
        lastName: string;
        isManager: boolean;
        managerOfGroup: Group;
        accessToAllWorkflowSteps: boolean;
        permissions: {
            [lang: string]: {
                workflowStepIds: number[];
            };
        };
        givenAccessAt: string;
    }
    interface Group {
        id: number;
        name: string;
    }
    type Role = 'all' | 'owner' | 'manager' | 'proofreader' | 'translator' | 'blocked';
    type LanguageRole = 'proofreader' | 'translator' | 'denied';
    interface AddProjectMemberRequest {
        userIds: number[];
        accessToAllWorkflowSteps?: boolean;
        managerAccess?: boolean;
        permissions?: any;
    }
    interface AddProjectMemberResponse {
        skipped: ResponseObject<ProjectMember>[];
        added: ResponseObject<ProjectMember>[];
        pagination: Pagination;
    }
    interface ReplaceProjectMemberRequest {
        accessToAllWorkflowSteps?: boolean;
        managerAccess?: boolean;
        permissions?: any;
    }
}
