"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Users = void 0;
const core_1 = require("../core");
/**
 * Users API gives you the possibility to get profile information about the currently authenticated user.
 *
 * In Crowdin Enterprise users are the members of your organization with the defined access levels.
 * Use API to get the list of organization users and to check the information on a specific user.
 */
class Users extends core_1.CrowdinApi {
    listProjectMembers(projectId, options, deprecatedRole, deprecatedLanguageId, deprecatedLimit, deprecatedOffset) {
        let url = `${this.url}/projects/${projectId}/members`;
        if ((0, core_1.isOptionalString)(options, '1' in arguments)) {
            options = {
                search: options,
                role: deprecatedRole,
                languageId: deprecatedLanguageId,
                limit: deprecatedLimit,
                offset: deprecatedOffset,
            };
        }
        url = this.addQueryParam(url, 'search', options.search);
        url = this.addQueryParam(url, 'role', options.role);
        url = this.addQueryParam(url, 'languageId', options.languageId);
        return this.getList(url, options.limit, options.offset);
    }
    /**
     * @param projectId project identifier
     * @param request request body
     * @see https://support.crowdin.com/enterprise/api/#operation/api.projects.members.post
     */
    addProjectMember(projectId, request) {
        const url = `${this.url}/projects/${projectId}/members`;
        return this.post(url, request, this.defaultConfig());
    }
    /**
     * @param projectId project identifier
     * @param memberId member identifier
     * @see https://support.crowdin.com/api/v2/#operation/api.projects.members.get
     */
    getProjectMemberPermissions(projectId, memberId) {
        const url = `${this.url}/projects/${projectId}/members/${memberId}`;
        return this.get(url, this.defaultConfig());
    }
    /**
     * @param projectId project identifier
     * @param memberId member identifier
     * @see https://support.crowdin.com/enterprise/api/#operation/api.projects.members.put
     */
    replaceProjectMemberPermissions(projectId, memberId, request = {}) {
        const url = `${this.url}/projects/${projectId}/members/${memberId}`;
        return this.put(url, request, this.defaultConfig());
    }
    /**
     * @param projectId project identifier
     * @param memberId member identifier
     * @see https://support.crowdin.com/enterprise/api/#operation/api.projects.members.delete
     */
    deleteMemberFromProject(projectId, memberId) {
        const url = `${this.url}/projects/${projectId}/members/${memberId}`;
        return this.delete(url, this.defaultConfig());
    }
    listUsers(options, deprecatedSearch, deprecatedTwoFactor, deprecatedLimit, deprecatedOffset) {
        let url = `${this.url}/users`;
        if ((0, core_1.isOptionalString)(options, '0' in arguments)) {
            options = {
                status: options,
                search: deprecatedSearch,
                twoFactor: deprecatedTwoFactor,
                limit: deprecatedLimit,
                offset: deprecatedOffset,
            };
        }
        url = this.addQueryParam(url, 'status', options.status);
        url = this.addQueryParam(url, 'search', options.search);
        url = this.addQueryParam(url, 'twoFactor', options.twoFactor);
        return this.getList(url, options.limit, options.offset);
    }
    /**
     * @param request request body
     * @see https://support.crowdin.com/enterprise/api/#operation/api.users.post
     */
    inviteUser(request) {
        const url = `${this.url}/users`;
        return this.post(url, request, this.defaultConfig());
    }
    /**
     * @param userId user identifier
     * @see https://support.crowdin.com/enterprise/api/#operation/api.users.getById
     */
    getUserInfo(userId) {
        const url = `${this.url}/users/${userId}`;
        return this.get(url, this.defaultConfig());
    }
    /**
     * @param userId user identifier
     * @see https://support.crowdin.com/enterprise/api/#operation/api.users.delete
     */
    deleteUser(userId) {
        const url = `${this.url}/users/${userId}`;
        return this.delete(url, this.defaultConfig());
    }
    /**
     * @param userId user identifier
     * @param request request body
     * @see https://support.crowdin.com/enterprise/api/#operation/api.users.patch
     */
    editUser(userId, request) {
        const url = `${this.url}/users/${userId}`;
        return this.patch(url, request, this.defaultConfig());
    }
    /**
     * @see https://support.crowdin.com/api/v2/#operation/api.user.get
     */
    getAuthenticatedUser() {
        const url = `${this.url}/user`;
        return this.get(url, this.defaultConfig());
    }
}
exports.Users = Users;
