import { BooleanInt, CrowdinApi, DownloadLink, PaginationOptions, PatchRequest, ResponseList, ResponseObject } from '../core';
/**
 * Create and assign tasks to get files translated or proofread by specific people.
 * You can set the due dates, split words between people, and receive notifications about the changes and updates on tasks.
 * Tasks are project-specific, so youâ€™ll have to create them within a project.
 *
 * Use API to create, modify, and delete specific tasks.
 */
export declare class Tasks extends CrowdinApi {
    /**
     * @param projectId project identifier
     * @param options optional parameters for the request
     * @see https://support.crowdin.com/api/v2/#operation/api.projects.tasks.getMany
     */
    listTasks(projectId: number, options?: TasksModel.ListTasksOptions): Promise<ResponseList<TasksModel.Task>>;
    /**
     * @param projectId project identifier
     * @param limit maximum number of items to retrieve (default 25)
     * @param offset starting offset in the collection (default 0)
     * @param status list tasks with specified statuses. It can be one status or a list of comma-separated status values
     * @deprecated optional parameters should be passed through an object
     * @see https://support.crowdin.com/api/v2/#operation/api.projects.tasks.getMany
     */
    listTasks(projectId: number, limit?: number, offset?: number, status?: TasksModel.Status): Promise<ResponseList<TasksModel.Task>>;
    /**
     * @param projectId project identifier
     * @param request request body
     * @see https://support.crowdin.com/api/v2/#operation/api.projects.tasks.post
     */
    addTask(projectId: number, request: TasksModel.CreateTaskEnterpriseRequest | TasksModel.CreateTaskRequest | TasksModel.CreateTaskVendorOhtRequest | TasksModel.CreateTaskVendorGengoRequest | TasksModel.CreateTaskVendorTranslatedRequest): Promise<ResponseObject<TasksModel.Task>>;
    /**
     * @param projectId project identifier
     * @param taskId task identifier
     * @see https://support.crowdin.com/api/v2/#operation/api.projects.tasks.exports.post
     */
    exportTaskStrings(projectId: number, taskId: number): Promise<ResponseObject<DownloadLink>>;
    /**
     * @param projectId project identifier
     * @param taskId task identifier
     * @see https://support.crowdin.com/api/v2/#operation/api.projects.tasks.get
     */
    getTask(projectId: number, taskId: number): Promise<ResponseObject<TasksModel.Task>>;
    /**
     * @param projectId project identifier
     * @param taskId task identifier
     * @see https://support.crowdin.com/api/v2/#operation/api.projects.tasks.delete
     */
    deleteTask(projectId: number, taskId: number): Promise<void>;
    /**
     * @param projectId project identifier
     * @param taskId task identifier
     * @param request request body
     * @see https://support.crowdin.com/api/v2/#operation/api.projects.tasks.patch
     */
    editTask(projectId: number, taskId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.Task>>;
    /**
     * @param options optional parameters for the request
     * @see https://support.crowdin.com/api/v2/#operation/api.user.tasks.getMany
     */
    listUserTasks(options?: TasksModel.ListUserTasksOptions): Promise<ResponseList<TasksModel.UserTask>>;
    /**
     * @param limit maximum number of items to retrieve (default 25)
     * @param offset starting offset in the collection (default 0)
     * @param status list tasks with specified statuses. It can be one status or a list of comma-separated status values
     * @param isArchived list archived/not archived tasks for the authorized user. 1 - archived, 0 - not archived
     * @deprecated optional parameters should be passed through an object
     * @see https://support.crowdin.com/api/v2/#operation/api.user.tasks.getMany
     */
    listUserTasks(limit?: number, offset?: number, status?: TasksModel.Status, isArchived?: BooleanInt): Promise<ResponseList<TasksModel.UserTask>>;
    /**
     * @param projectId project identifier
     * @param taskId task identifier
     * @param request request body
     * @see https://support.crowdin.com/api/v2/#operation/api.user.tasks.patch
     */
    editTaskArchivedStatus(projectId: number, taskId: number, request: PatchRequest[]): Promise<ResponseObject<TasksModel.UserTask>>;
}
export declare namespace TasksModel {
    interface Task {
        id: number;
        projectId: number;
        creatorId: number;
        type: Type;
        vendor: string;
        status: Status;
        title: string;
        assignees: Assignee[];
        assignedTeams: AssignedTeam[];
        fileIds: number[];
        progress: Progress;
        translateProgress: Progress;
        sourceLanguageId: string;
        targetLanguageId: string;
        description: string;
        hash: string;
        translationUrl: string;
        wordsCount: number;
        filesCount: number;
        commentsCount: number;
        deadline: string;
        timeRange: string;
        workflowStepId: number;
        buyUrl: string;
        createdAt: string;
        updatedAt: string;
    }
    interface ListUserTasksOptions extends PaginationOptions {
        status?: Status;
        isArchived?: BooleanInt;
    }
    interface UserTask extends Task {
        isArchived: boolean;
    }
    interface CreateTaskEnterpriseRequest {
        workflowStepId: number;
        title: string;
        languageId: string;
        fileIds: number[];
        status?: Status;
        description?: string;
        splitFiles?: boolean;
        skipAssignedStrings?: boolean;
        assignees?: CreateTaskAssignee[];
        deadline?: string;
        labelIds?: number[];
        dateFrom?: string;
        dateTo?: string;
    }
    interface CreateTaskRequest {
        title: string;
        languageId: string;
        fileIds: number[];
        type: Type;
        status?: Status;
        description?: string;
        splitFiles?: boolean;
        skipAssignedStrings?: boolean;
        skipUntranslatedStrings?: boolean;
        labelIds?: number[];
        assignees?: CreateTaskAssignee[];
        deadline?: string;
        dateFrom?: string;
        dateTo?: string;
    }
    interface CreateTaskVendorOhtRequest {
        title: string;
        languageId: string;
        fileIds: number[];
        type: Type;
        vendor: string;
        status?: Status;
        description?: string;
        expertise?: Expertise;
        labelIds?: number[];
        includeUntranslatedStringsOnly?: boolean;
        dateFrom?: string;
        dateTo?: string;
    }
    interface CreateTaskVendorGengoRequest {
        title: string;
        languageId: string;
        fileIds: number[];
        type: Type;
        vendor: string;
        status?: Status;
        description?: string;
        expertise?: Expertise;
        tone?: Tone;
        purpose?: Purpose;
        customerMessage?: string;
        usePreferred?: boolean;
        editService?: boolean;
        labelIds?: number[];
        dateFrom?: string;
        dateTo?: string;
    }
    interface CreateTaskVendorTranslatedRequest {
        title: string;
        languageId: string;
        fileIds: number[];
        type: Type;
        vendor: string;
        status?: Status;
        description?: string;
        expertise?: Expertise;
        subject?: Subject;
        labelIds?: number[];
        dateFrom?: string;
        dateTo?: string;
    }
    interface CreateTaskAssignee {
        id: number;
        wordsCount?: number;
    }
    type Status = 'todo' | 'in_progress' | 'done' | 'closed';
    enum Type {
        TRANSLATE = 0,
        PROOFREAD = 1,
        TRANSLATE_BY_VENDOR = 2
    }
    interface Assignee {
        id: number;
        username: string;
        fullName: string;
        avatarUrl: string;
        wordsCount: number;
        wordsLeft: number;
    }
    interface AssignedTeam {
        id: number;
        wordsCount: number;
    }
    interface Progress {
        total: number;
        done: number;
        percent: number;
    }
    type Expertise = 'standard' | 'mobile-applications' | 'software-it' | 'gaming-video-games' | 'technical-engineering' | 'marketing-consumer-media' | 'business-finance' | 'legal-certificate' | 'cv' | 'medical' | 'patents' | 'ad-words-banners' | 'automotive-aerospace' | 'scientific' | 'scientific-academic' | 'tourism' | 'certificates-translation' | 'training-employee-handbooks' | 'forex-crypto';
    type Tone = '' | 'Informal' | 'Friendly' | 'Business' | 'Formal' | 'other';
    type Purpose = 'standard' | 'Personal use' | 'Online content' | 'App/Web localization' | 'Media content' | 'Semi-technical' | 'other';
    type Subject = 'general' | 'accounting_finance' | 'aerospace_defence' | 'architecture' | 'art' | 'automotive' | 'certificates_diplomas_licences_cv_etc' | 'chemical' | 'civil_engineering_construction' | 'corporate_social_responsibility' | 'cosmetics' | 'culinary' | 'electronics_electrical_engineering' | 'energy_power_generation_oil_gas' | 'environment' | 'fashion' | 'games_viseogames_casino' | 'general_business_commerce' | 'history_archaeology' | 'information_technology' | 'insurance' | 'internet_e-commerce' | 'legal_documents_contracts' | 'literary_translations' | 'marketing_advertising_material_public_relations' | 'matematics_and_physics' | 'mechanical_manufacturing' | 'media_journalism_publishing' | 'medical_pharmaceutical' | 'music' | 'private_correspondence_letters' | 'religion' | 'science' | 'shipping_sailing_maritime' | 'social_science' | 'telecommunications' | 'travel_tourism';
    interface ListTasksOptions extends PaginationOptions {
        status?: TasksModel.Status;
    }
}
